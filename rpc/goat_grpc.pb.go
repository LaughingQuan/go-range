// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: rpc/goat.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoatServiceClient is the client API for GoatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoatServiceClient interface {
	SampleUnary(ctx context.Context, in *GoatRequest, opts ...grpc.CallOption) (*GoatResponse, error)
	SampleStream(ctx context.Context, opts ...grpc.CallOption) (GoatService_SampleStreamClient, error)
}

type goatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoatServiceClient(cc grpc.ClientConnInterface) GoatServiceClient {
	return &goatServiceClient{cc}
}

func (c *goatServiceClient) SampleUnary(ctx context.Context, in *GoatRequest, opts ...grpc.CallOption) (*GoatResponse, error) {
	out := new(GoatResponse)
	err := c.cc.Invoke(ctx, "/rpc.GoatService/SampleUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goatServiceClient) SampleStream(ctx context.Context, opts ...grpc.CallOption) (GoatService_SampleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoatService_ServiceDesc.Streams[0], "/rpc.GoatService/SampleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goatServiceSampleStreamClient{stream}
	return x, nil
}

type GoatService_SampleStreamClient interface {
	Send(*GoatRequest) error
	Recv() (*GoatResponse, error)
	grpc.ClientStream
}

type goatServiceSampleStreamClient struct {
	grpc.ClientStream
}

func (x *goatServiceSampleStreamClient) Send(m *GoatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goatServiceSampleStreamClient) Recv() (*GoatResponse, error) {
	m := new(GoatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoatServiceServer is the server API for GoatService service.
// All implementations must embed UnimplementedGoatServiceServer
// for forward compatibility
type GoatServiceServer interface {
	SampleUnary(context.Context, *GoatRequest) (*GoatResponse, error)
	SampleStream(GoatService_SampleStreamServer) error
	mustEmbedUnimplementedGoatServiceServer()
}

// UnimplementedGoatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoatServiceServer struct {
}

func (UnimplementedGoatServiceServer) SampleUnary(context.Context, *GoatRequest) (*GoatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SampleUnary not implemented")
}
func (UnimplementedGoatServiceServer) SampleStream(GoatService_SampleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SampleStream not implemented")
}
func (UnimplementedGoatServiceServer) mustEmbedUnimplementedGoatServiceServer() {}

// UnsafeGoatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoatServiceServer will
// result in compilation errors.
type UnsafeGoatServiceServer interface {
	mustEmbedUnimplementedGoatServiceServer()
}

func RegisterGoatServiceServer(s grpc.ServiceRegistrar, srv GoatServiceServer) {
	s.RegisterService(&GoatService_ServiceDesc, srv)
}

func _GoatService_SampleUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoatServiceServer).SampleUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GoatService/SampleUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoatServiceServer).SampleUnary(ctx, req.(*GoatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoatService_SampleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoatServiceServer).SampleStream(&goatServiceSampleStreamServer{stream})
}

type GoatService_SampleStreamServer interface {
	Send(*GoatResponse) error
	Recv() (*GoatRequest, error)
	grpc.ServerStream
}

type goatServiceSampleStreamServer struct {
	grpc.ServerStream
}

func (x *goatServiceSampleStreamServer) Send(m *GoatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goatServiceSampleStreamServer) Recv() (*GoatRequest, error) {
	m := new(GoatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoatService_ServiceDesc is the grpc.ServiceDesc for GoatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.GoatService",
	HandlerType: (*GoatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SampleUnary",
			Handler:    _GoatService_SampleUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SampleStream",
			Handler:       _GoatService_SampleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/goat.proto",
}

// GRPCDemoClient is the client API for GRPCDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCDemoClient interface {
	SimpleMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type gRPCDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCDemoClient(cc grpc.ClientConnInterface) GRPCDemoClient {
	return &gRPCDemoClient{cc}
}

func (c *gRPCDemoClient) SimpleMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gRPCDemo/SimpleMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCDemoServer is the server API for GRPCDemo service.
// All implementations must embed UnimplementedGRPCDemoServer
// for forward compatibility
type GRPCDemoServer interface {
	SimpleMethod(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGRPCDemoServer()
}

// UnimplementedGRPCDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCDemoServer struct {
}

func (UnimplementedGRPCDemoServer) SimpleMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleMethod not implemented")
}
func (UnimplementedGRPCDemoServer) mustEmbedUnimplementedGRPCDemoServer() {}

// UnsafeGRPCDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCDemoServer will
// result in compilation errors.
type UnsafeGRPCDemoServer interface {
	mustEmbedUnimplementedGRPCDemoServer()
}

func RegisterGRPCDemoServer(s grpc.ServiceRegistrar, srv GRPCDemoServer) {
	s.RegisterService(&GRPCDemo_ServiceDesc, srv)
}

func _GRPCDemo_SimpleMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCDemoServer).SimpleMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.gRPCDemo/SimpleMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCDemoServer).SimpleMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCDemo_ServiceDesc is the grpc.ServiceDesc for GRPCDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.gRPCDemo",
	HandlerType: (*GRPCDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleMethod",
			Handler:    _GRPCDemo_SimpleMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/goat.proto",
}
